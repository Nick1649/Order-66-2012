package {	 	import cloneClass;	import laserClass;	import Jedi;	import Jedi2;	import Jedi3;	import flash.display.MovieClip;	import flash.events.*;    import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.text.TextField;  // used for scores	import flash.text.TextFormat  // used to set color to text	import flash.media.Sound;	import flash.display.DisplayObject;	import fl.motion.MotionEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.utils.Timer;	import flash.events.TimerEvent;			public class runGame extends MovieClip	{			public var count1 = 0;		public	var count2 = 0;		public var count3 = 0;		public var count:Number = 0;		public var d:Number = 0;		public var clone = new cloneClass();		public var score = 0;		//public var endGame:Number = 0;				public var laserArray:Array = new Array();		public var jediArray:Array = new Array();		public var jedi2Array:Array = new Array();		public var jedi3Array:Array = new Array();				private var ableToFire:Boolean = false;		private var ableToStart:Boolean = false;		private var spawn:Boolean = true;		private var started:Boolean = false;		private var isGameOver:Boolean = false;						private var rateOfFire:Timer = new Timer(1);		public var startTimer:Timer = new Timer(1000);		public var spawnTimer:Timer = new Timer(600);		public var endTimer:Timer = new Timer(1000);				public function runGame()  // constructor		{			menu_mc.visible = true;			endGameMenu.visible = false;			scoreBox.visible = false;			floor_mc.visible = false;			inBox.visible = false;			credBox.visible = false;			cloneInstruct_mc.visible = false;			backBTN.visible = false;			menu_mc.startBTN.addEventListener(MouseEvent.CLICK, startGame);			menu_mc.instrucBTN.addEventListener(MouseEvent.CLICK, controls);			menu_mc.credBTN.addEventListener(MouseEvent.CLICK, credits);		}				function startGame(event:MouseEvent):void 		{			menu_mc.visible = false;			cloneInstruct_mc.visible = true;			cloneInstruct_mc.play();			trace ("Instruction Video Playing");			startTimer.start();			startTimer.addEventListener(TimerEvent.TIMER, startTimerTick);		}				function controls(event:MouseEvent):void 		{			menu_mc.visible = false;			inBox.visible = true;			backBTN.visible = true;			backBTN.addEventListener(MouseEvent.CLICK, back);		}				function credits(event:MouseEvent):void 		{			menu_mc.visible = false;			credBox.visible = true;			backBTN.visible = true;		}				function back(event:MouseEvent):void 		{			menu_mc.visible = true;			credBox.visible = false;			inBox.visible = false;			backBTN.visible = false;			backBTN.removeEventListener(MouseEvent.CLICK, back);		}				public function handlecollision (event:Event): void		{			for (var s in laserArray)			{				for (var f in jediArray)				{					if(laserArray[s].hitTestObject(jediArray[f]))					{						laserArray[s].removeEventListener(Event.ENTER_FRAME, handlecollision);						stage.removeChild(laserArray[s]);						delete laserArray[s];						score += 50;						scoreBox.text = "Score: " + score;						trace ("Score: " + score)						stage.removeChild(jediArray[f]);						delete jediArray[f];												trace ("The laser hit a Jedi.");					}				}								for (var g in jedi2Array)				{					if(laserArray[s].hitTestObject(jedi2Array[g]))					{						laserArray[s].removeEventListener(Event.ENTER_FRAME, handlecollision);						stage.removeChild(laserArray[s]);						delete laserArray[s];						score += 100;						scoreBox.text = "Score: " + score;						trace ("Score: " + score)						stage.removeChild(jedi2Array[g]);						delete jedi2Array[g];												trace ("The laser hit a Jedi2.");					}				}								for (var h in jedi3Array)				{					if(laserArray[s].hitTestObject(jedi3Array[h]))					{						laserArray[s].removeEventListener(Event.ENTER_FRAME, handlecollision);						stage.removeChild(laserArray[s]);						delete laserArray[s];						score += 150;						scoreBox.text = "Score: " + score;						trace ("Score: " + score)						stage.removeChild(jedi3Array[h]);						delete jedi3Array[h];												trace ("The laser hit a Jedi.");					}				}			}									if (laserArray[s].x > 700 || laserArray[s].x < 0 || laserArray[s].y > 500 || laserArray[s].y < 0)			{				laserArray[s].removeEventListener(Event.ENTER_FRAME, handlecollision);				stage.removeChild(laserArray[s]);				delete laserArray[s];				trace ("Out of bounds laser deleted")			}		}				function look(event:MouseEvent):void		{			var dx = mouseX - clone.x;			var dy = mouseY - clone.y;			var angle = Math.atan2(dy,dx)/ Math.PI * 180 ;			clone.rotation = angle;		}				function fire(event:MouseEvent):void		{		 			if (ableToFire == true)			{				laserArray.push(new laserClass);				stage.addChild(laserArray[count]);				laserArray[count].rotation = clone.rotation;				laserArray[count].x += clone.x;				laserArray[count].y += clone.y;				stage.setChildIndex(laserArray[count],1);				laserArray[count].addEventListener(Event.ENTER_FRAME, handlecollision);				count++;				rateOfFire.start();				ableToFire = false; 			}		}				public function onTimerTick (event:TimerEvent) : void		{			trace(rateOfFire.currentCount);			if (rateOfFire.currentCount == 10)    		{				ableToFire = true;				rateOfFire.stop();				rateOfFire.reset();    		}		}				public function startTimerTick (event:TimerEvent) : void		{			trace(startTimer.currentCount);			if (startTimer.currentCount == 10)    		{				ableToStart = true;				startTimer.stop();				cloneInstruct_mc.visible = false;				scoreBox.visible = true;				floor_mc.visible = true;				stage.addChild(clone);				clone.rotation = 270;				scoreBox.text = "Score: " + score;				ableToFire = true;				rateOfFire.addEventListener(TimerEvent.TIMER, onTimerTick);				spawnTimer.start();				spawnTimer.addEventListener(TimerEvent.TIMER, spawnTimerTick);				stage.addEventListener(MouseEvent.CLICK, fire);				stage.addEventListener(MouseEvent.MOUSE_MOVE, look);				started = true;								startTimer.removeEventListener(TimerEvent.TIMER, startTimerTick);				stage.addEventListener(Event.ENTER_FRAME, gameOver);    		}		}				public function spawnTimerTick (event:TimerEvent) : void		{			var n:int;			var j:int;			var spa:int;						n = Math.floor(Math.random() * (3 - 0) + 0);						switch (n)			{				case 0: spawn = true;					break;				case 1: spawn = true;					break;				case 2: spawn = true;					break;				default: spawn = false;			}						trace ("spawnTimer: " + spawnTimer.currentCount)			switch (spawnTimer.currentCount)    		{				case 10: spa = 2;					break;				case 20: spa = 4;					break;				case 30: spa = 6;					break;				case 40: spa = 8;					break;				case 50: spa = 10;					break;				case 60: spa = 0;					spawn = false;					spawnTimer.stop();					endTimer.start();					endTimer.addEventListener(TimerEvent.TIMER, endTimerTick);					break;				default: spa = 1;    		}						if (started == true && spawn == true)			{				j = Math.floor(Math.random() * (3 - 0) + 0);				while (spa > 0)				{					switch (j)					{						case 0: 							jediArray.push(new Jedi);							stage.addChild(jediArray[count1]);							count1++;							break;						case 1:							jedi2Array.push(new Jedi2);							stage.addChild(jedi2Array[count2]);							count2++;							break;						case 2:							jedi3Array.push(new Jedi3);							stage.addChild(jedi3Array[count3]);							count3++;							break;						case 3: 							jediArray.push(new Jedi);							stage.addChild(jediArray[count1]);							count1++;							trace(count)							break;					}										spawn = false;					spa--;				}			}						}				public function gameOver (event:Event) : void		{			for (var f in jediArray)			{				if (jediArray[f].y > 500)				{					stage.removeChild(jediArray[f]);					delete jediArray[f];					trace ("Out of bounds Jedi deleted");					isGameOver = true;									}			}						for (var g in jedi2Array)			{				if (jedi2Array[g].y > 500)				{					stage.removeChild(jedi2Array[g]);					delete jedi2Array[g];					trace ("Out of bounds Jedi deleted");					isGameOver = true;				}			}						for (var h in jedi3Array)			{				if (jedi3Array[h].y > 500)				{					stage.removeChild(jedi3Array[h]);					delete jedi3Array[h];					trace ("Out of bounds Jedi deleted");					isGameOver = true;				}			}						if (isGameOver == true)			{				trace ("Game Over")				stage.removeEventListener(Event.ENTER_FRAME, gameOver);				stage.removeEventListener(MouseEvent.CLICK, fire);				endGameMenu.visible = true;				endGameMenu.overBox.text = "Game Over";							}		}				public function endTimerTick (event:TimerEvent) : void		{			if (endTimer.currentCount >= 25)			{				isGameOver = true;			}			trace("Over? " + isGameOver)		}			}}